/* /assets/style.css */

/* Basic reset and mobile setup */
* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

html, body {
    width: 100%;
    height: 100%;
    overflow: hidden;
    background-color: #0a0a2a;
    color: #f0f8ff;
    font-family: Arial, sans-serif;
}

/* --- Particle Canvas Background (NEW) --- */
#particle-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1; /* Sits behind everything */
    background: linear-gradient(135deg, #0f172a 0%, #312e81 100%);
}

#game-screen {
    position: relative;
    width: 100%;
    height: 100%;
}

.game-view {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 1rem;
}

.hidden {
    display: none;
}

/* Ensure any view with .hidden truly disappears, regardless of other display rules */
.game-view.hidden { display: none !important; }

/* --- Main Menu View (NEW) --- */
#menu-view {
    /* Containerless look; background styled via menu.css grid effects */
    background: transparent;
}

.menu-container {
    text-align: center;
}

.game-title { display: none; }

.logline { display: none; }

.neon-button {
    /* Style from neocitydev.html */
    background: linear-gradient(90deg, #e811ff, #9333ea);
    color: white;
    font-weight: bold;
    padding: 0.8rem 2rem;
    border-radius: 50px;
    transition: all 0.3s ease;
    border: 2px solid transparent;
    box-shadow: 0 0 10px #e811ff, 0 0 20px #9333ea;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-size: 1rem;
    cursor: pointer;
}

.neon-button:hover {
    transform: translateY(-3px) scale(1.05);
    box-shadow: 0 0 15px #e811ff, 0 0 30px #9333ea;
}


/* --- World View --- */
#world-view {
    background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #312e81 100%);
    position: relative;
}

#world-canvas {
    width: 100%;
    height: 100%;
    background-color: transparent;
    cursor: crosshair;
    image-rendering: pixelated; /* For crisp sprite rendering */
}

#world-view::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
        repeating-linear-gradient(
            0deg,
            transparent,
            transparent 2px,
            rgba(0,255,255,0.02) 2px,
            rgba(0,255,255,0.02) 4px
        );
    pointer-events: none;
    z-index: 1;
}

/* World view controls hint */
#world-view .controls-hint {
    position: absolute;
    bottom: 20px;
    left: 20px;
    background: rgba(0,0,0,0.7);
    color: #00ffff;
    padding: 10px 16px;
    border-radius: 6px;
    font-family: 'Courier New', monospace;
    font-size: 14px;
    border: 1px solid rgba(0,255,255,0.3);
    z-index: 2;
    opacity: 0.8;
}

/* --- Dialogue View (Episode-style) --- */
#dialogue-view {
    position: absolute;
    inset: 0;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    background: transparent;
    z-index: 100;
    pointer-events: none;
}

/* Ensure hidden reliably hides the dialogue overlay despite ID rule specificity */
#dialogue-view.hidden { display: none !important; }

#dialogue-view .dialogue-box {
    width: 100%;
    min-height: 200px;
    max-height: 300px;
    background: rgba(6, 12, 24, 0.95);
    border-top: 2px solid rgba(0,255,255,0.4);
    box-shadow: 
        0 -4px 30px rgba(0, 255, 255, 0.2),
        inset 0 1px 0 rgba(255,255,255,0.1);
    display: flex;
    align-items: stretch;
    padding: 0;
    position: relative;
    overflow: hidden;
    pointer-events: all;
}

#dialogue-view .dialogue-box::before {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(45deg, 
        transparent, 
        rgba(0,255,255,0.1), 
        transparent, 
        rgba(148,0,211,0.1), 
        transparent);
    background-size: 400% 400%;
    border-radius: 14px;
    z-index: -1;
    animation: borderGlow 8s ease-in-out infinite;
}

@keyframes borderGlow {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
}

/* System dialogue overlay (for system messages) */
#dialogue-view .system-overlay {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: rgba(0, 0, 0, 0.9);
    border: 2px solid rgba(0,255,255,0.6);
    border-radius: 12px;
    padding: 24px 32px;
    max-width: 600px;
    text-align: center;
    box-shadow: 0 0 30px rgba(0,255,255,0.3);
    z-index: 200;
    pointer-events: all;
}

#dialogue-view .system-overlay .system-text {
    font-size: 18px;
    color: #00ffff;
    line-height: 1.6;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-weight: bold;
}

/* Character display in scene (full body) */
#dialogue-view .scene-character {
    position: absolute;
    bottom: 200px;
    pointer-events: none;
    z-index: 50;
}

#dialogue-view .scene-character.speaking {
    filter: brightness(1.1) drop-shadow(0 0 15px rgba(0,255,255,0.3));
}

#dialogue-view .scene-character.player {
    left: 20%;
}

#dialogue-view .scene-character.other {
    right: 20%;
}

/* Character portraits positioned on left/right of dialogue box */
#dialogue-view .character-portrait {
    width: 120px;
    height: 200px;
    position: relative;
    overflow: hidden;
    background: rgba(0,255,255,0.05);
    border-right: 1px solid rgba(0,255,255,0.2);
    flex-shrink: 0;
}

#dialogue-view .character-portrait.right {
    border-right: none;
    border-left: 1px solid rgba(0,255,255,0.2);
    order: 2;
}

#dialogue-view .character-portrait img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center top;
    filter: drop-shadow(0 2px 8px rgba(0,0,0,0.6));
    transition: transform 0.2s ease;
}

#dialogue-view .character-portrait:hover img {
    transform: scale(1.02);
}

#dialogue-view .dialogue-content {
    display: flex;
    flex-direction: column;
    flex: 1;
    padding: 20px 24px;
    order: 1;
}

#dialogue-view .character-name {
    font-size: 18px;
    color: #00ffff;
    margin-bottom: 8px;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-weight: bold;
    text-shadow: 0 0 6px rgba(0,255,255,0.5);
}

#dialogue-view .dialogue-text {
    font-size: 16px;
    line-height: 1.6;
    color: #e6faff;
    min-height: 60px;
    flex: 1;
    display: flex;
    align-items: center;
}

/* Temporary hover hint style shown when hovering choices */
#dialogue-view .dialogue-text.hover-hint {
    font-style: italic;
    color: #dffaff;
    opacity: 0.95;
}

#dialogue-view .dialogue-choices {
    margin-top: 12px;
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
}

#dialogue-view .dialogue-choices .choice-btn {
    background: rgba(0,255,255,0.05);
    border: 2px solid #00ffff;
    color: #00ffff;
    padding: 8px 16px;
    font-size: 14px;
    letter-spacing: 1px;
    cursor: pointer;
    transition: all 0.3s ease;
    border-radius: 4px;
    font-family: inherit;
    text-transform: uppercase;
    font-weight: 500;
    position: relative;
    overflow: hidden;
}

#dialogue-view .dialogue-choices .choice-btn:hover {
    background: rgba(0,255,255,0.15);
    color: #ffffff;
    box-shadow: 0 0 16px rgba(0,255,255,0.4);
    transform: translateY(-2px);
    border-color: rgba(0,255,255,0.8);
}

#dialogue-view .dialogue-choices .choice-btn:active {
    transform: translateY(0);
    background: rgba(0,255,255,0.25);
}

/* Dialogue effects */
#dialogue-view.effect-flash::after {
    content: '';
    position: absolute;
    inset: 0;
    background: rgba(255,255,255,0.7);
    animation: flashFade 0.4s ease;
    pointer-events: none;
}

@keyframes flashFade {
    0% { opacity: 0.9; }
    100% { opacity: 0; }
}

#dialogue-view.effect-glitch .dialogue-box {
    animation: glitchShift 0.8s steps(4, end);
}

@keyframes glitchShift {
    0% { transform: translate(0,0); filter: hue-rotate(0deg); }
    25% { transform: translate(-3px, 1px); filter: hue-rotate(20deg); }
    50% { transform: translate(3px, -2px); filter: hue-rotate(-20deg); }
    75% { transform: translate(-1px, 2px); filter: hue-rotate(10deg); }
    100% { transform: translate(0,0); filter: hue-rotate(0deg); }
}

#dialogue-view.effect-scan::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(to bottom, rgba(0,255,255,0) 0%, rgba(0,255,255,0.12) 50%, rgba(0,255,255,0) 100%);
    background-size: 100% 6px;
    animation: scanlineMove 1.4s linear infinite;
    pointer-events: none;
}

@keyframes scanlineMove {
    0% { background-position-y: 0; }
    100% { background-position-y: 100%; }
}

/* --- Enhanced Overlay Styling --- */
.overlay {
    position: fixed;
    inset: 0;
    background: rgba(0,0,0,0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 200;
    backdrop-filter: blur(8px);
    animation: overlayFadeIn 0.3s ease-out;
}

.overlay.hidden { 
    display: none !important; 
}

.overlay .overlay-content {
    background: rgba(6, 12, 24, 0.95);
    border: 2px solid rgba(0,255,255,0.4);
    border-radius: 16px;
    box-shadow: 
        0 0 60px rgba(0, 255, 255, 0.3),
        inset 0 1px 0 rgba(255,255,255,0.1);
    padding: 32px;
    width: min(95%, 1000px);
    max-height: 90vh;
    overflow-y: auto;
    color: #e6faff;
    position: relative;
    animation: overlaySlideIn 0.4s ease-out;
}

@keyframes overlayFadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes overlaySlideIn {
    from { 
        opacity: 0; 
        transform: translateY(-20px) scale(0.95); 
    }
    to { 
        opacity: 1; 
        transform: translateY(0) scale(1); 
    }
}

/* --- Enhanced Minigames UI --- */
.minigame-container { 
    margin-top: 20px; 
    text-align: center;
}

.minigame-container h2 {
    color: #00ffff;
    font-size: 28px;
    margin-bottom: 16px;
    text-transform: uppercase;
    letter-spacing: 2px;
    text-shadow: 0 0 10px rgba(0,255,255,0.5);
}

.minigame-container p {
    color: #e6faff;
    font-size: 18px;
    line-height: 1.6;
    margin-bottom: 20px;
    opacity: 0.9;
}

.minigame-instructions {
    background: rgba(0,255,255,0.08);
    border: 1px solid rgba(0,255,255,0.2);
    border-radius: 8px;
    padding: 16px;
    margin: 16px 0 24px 0;
    text-align: left;
}

.minigame-instructions p {
    margin: 0;
    font-size: 16px;
    color: #b8e6ff;
}

.minigame-instructions strong {
    color: #00ffff;
    text-transform: uppercase;
    letter-spacing: 1px;
}
.simon-grid {
    display: grid;
    grid-template-columns: repeat(2, 140px);
    grid-template-rows: repeat(2, 140px);
    gap: 18px;
    justify-content: center;
    margin: 24px auto;
    padding: 20px;
    background: rgba(0,255,255,0.05);
    border-radius: 12px;
    border: 1px solid rgba(0,255,255,0.2);
}
.simon-pad {
    width: 140px; 
    height: 140px; 
    border-radius: 16px; 
    border: 3px solid rgba(255,255,255,0.3);
    background: linear-gradient(135deg, 
        color-mix(in srgb, var(--pad-color, #00ffff) 70%, #000 30%),
        color-mix(in srgb, var(--pad-color, #00ffff) 50%, #000 50%)
    );
    box-shadow: 
        0 0 20px rgba(0,0,0,0.5), 
        inset 0 2px 10px rgba(255,255,255,0.1),
        0 0 0 4px rgba(var(--pad-color, 0,255,255), 0.1);
    color: #ffffff; 
    font-weight: 700; 
    font-size: 24px;
    cursor: pointer; 
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    text-shadow: 0 2px 4px rgba(0,0,0,0.5);
}
.simon-pad:hover { 
    transform: translateY(-2px) scale(1.02); 
    box-shadow: 
        0 4px 25px rgba(0,0,0,0.6), 
        inset 0 2px 10px rgba(255,255,255,0.15),
        0 0 0 4px rgba(var(--pad-color, 0,255,255), 0.2);
}

.simon-pad.active { 
    filter: brightness(1.8) saturate(1.4); 
    transform: scale(1.05); 
    box-shadow: 
        0 0 30px var(--pad-color, #00ffff),
        inset 0 0 20px rgba(255,255,255,0.3);
}
.simon-controls { 
    display: flex; 
    gap: 16px; 
    align-items: center; 
    justify-content: center; 
    margin-top: 20px;
    padding: 16px;
    background: rgba(0,0,0,0.3);
    border-radius: 8px;
    border: 1px solid rgba(0,255,255,0.2);
}

.simon-controls button {
    background: linear-gradient(135deg, #00ffff, #148fb8);
    border: none;
    color: #000;
    padding: 12px 24px;
    border-radius: 8px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.2s ease;
    text-transform: uppercase;
    letter-spacing: 1px;
}

.simon-controls button:hover {
    background: linear-gradient(135deg, #00e5ff, #00acc1);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,255,255,0.3);
}

.simon-controls span {
    color: #e6faff;
    font-size: 16px;
    font-weight: 500;
}

.pipe-grid {
    --size: 3;
    display: grid; grid-template-columns: repeat(var(--size), 88px); grid-template-rows: repeat(var(--size), 88px);
    gap: 10px; justify-content: center; margin: 16px auto;
}
.pipe-cell {
    width: 88px; height: 88px; border-radius: 10px; border: 2px solid rgba(0,255,255,0.3);
    background: radial-gradient(100% 100% at 50% 0%, rgba(0,255,255,0.08), rgba(0,0,0,0.6));
    position: relative; cursor: pointer; box-shadow: inset 0 0 18px rgba(0,255,255,0.12);
}
.pipe-cell::before, .pipe-cell::after {
    content: '';
    position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%);
    width: 16px; height: 16px; background: #00ffff; border-radius: 4px; box-shadow: 0 0 10px #00ffff;
}
.pipe-cell::before { display: none; }
.pipe-cell::after { display: none; }
/* Draw pipe arms via shadows */
.pipe-cell { --n:0; --e:0; --s:0; --w:0; }
.pipe-cell { box-shadow: inset 0 0 18px rgba(0,255,255,0.12); }
.pipe-cell .arm { display:none; }
/* Use gradients to draw arms visually */
.pipe-cell {
    background:
        linear-gradient(to bottom, transparent calc(50% - 8px), #00ffff calc(50% - 8px), #00ffff calc(50% + 8px), transparent calc(50% + 8px)) center/0 0 no-repeat,
        linear-gradient(to right,  transparent calc(50% - 8px), #00ffff calc(50% - 8px), #00ffff calc(50% + 8px), transparent calc(50% + 8px)) center/0 0 no-repeat,
        radial-gradient(circle at center, rgba(0,255,255,0.9) 0 8px, transparent 9px);
}
/* Expand gradients based on directional flags set via inline styles */
.pipe-cell { background-size:
        0 0,
        0 0,
        auto; }
.pipe-cell { background-position: center; }
.pipe-cell { background-repeat: no-repeat; }
.pipe-cell[style*="--n: 1"] { background-size: 16px 44px, var(--e-size,0) 0, auto; }
.pipe-cell[style*="--e: 1"] { --e-size: 44px; background-size: 16px 44px, 44px 16px, auto; }
.pipe-cell[style*="--s: 1"] { background-size: 16px 44px, var(--e-size,0) 16px, auto; }
.pipe-cell[style*="--w: 1"] { background-size: 16px 44px, 44px 16px, auto; }

/* Audio Stitch (wave reorder) */
.wave-grid { display:flex; gap:10px; justify-content:center; margin: 16px auto; }
.wave-segment {
    width: 70px; height: 100px; border-radius: 10px; border: 2px solid rgba(0,255,255,0.35);
    background: conic-gradient(from calc(var(--phase,0) * 45deg), rgba(0,255,255,0.2), rgba(148,0,211,0.25), rgba(0,255,255,0.2));
    box-shadow: inset 0 0 18px rgba(0,255,255,0.12);
    cursor: pointer; position: relative; overflow:hidden;
}
.wave-segment::after {
    content:''; position:absolute; inset:0; background:
        repeating-linear-gradient(to top, rgba(255,255,255,0.12) 0 2px, transparent 2px 6px);
    mix-blend-mode: screen; opacity: 0.4;
}
.wave-segment.selected { outline: 2px solid #00ffff; box-shadow: 0 0 14px #00ffff; }
.wave-controls { text-align:center; min-height: 24px; }

/* Input prompt */
.input-prompt { display:flex; gap: 10px; align-items:center; flex-wrap:wrap; }
.input-prompt label { color:#e6faff; font-size: 16px; }
.input-prompt .text-entry { padding:10px 12px; border:1px solid #00ffff; background:rgba(0,0,0,0.4); color:#e6faff; }
.input-error { color:#ff6b6b; margin-left: 8px; }
.shake { animation: shakeAnim 0.4s ease; }
@keyframes shakeAnim { 0%,100%{transform:translateX(0)} 20%{transform:translateX(-5px)} 40%{transform:translateX(5px)} 60%{transform:translateX(-3px)} 80%{transform:translateX(3px)} }

/* Stealth minigame */
.stealth-area { position: relative; width: 480px; max-width: 92vw; margin: 0 auto; padding: 16px; text-align:center; }
.stealth-area .seeker { position: relative; width: 100%; height: 140px; margin-bottom: 12px; background: rgba(0,0,0,0.35); border: 1px solid rgba(0,255,255,0.2); overflow:hidden; }
.stealth-area .seeker::before { content:''; position:absolute; top:0; bottom:0; width: 40%; left: calc(var(--phase, 0) * 100% - 20%); background: linear-gradient(90deg, transparent, rgba(255,0,0,0.18), transparent); filter: blur(4px); }
.stealth-area .cover { width: 100%; height: 10px; background: linear-gradient(90deg, rgba(0,255,255,0.4) 20%, rgba(148,0,211,0.4) 80%); margin-bottom: 12px; }
.stealth-area #stealth-status { min-height: 20px; margin-top: 8px; color: #e6faff; }

/* --- Minigame Visual Feedback --- */
.minigame-success {
    animation: successFade 0.3s ease-out;
}

@keyframes successFade {
    0% { opacity: 1; transform: scale(1); }
    100% { opacity: 0; transform: scale(1.05); }
}

.particle-burst {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 2rem;
    pointer-events: none;
    z-index: 100;
}

.particle-burst.success {
    animation: burstSuccess 1s ease-out forwards;
}

@keyframes burstSuccess {
    0% { 
        opacity: 1; 
        transform: translate(-50%, -50%) scale(0.5); 
    }
    50% { 
        opacity: 1; 
        transform: translate(-50%, -50%) scale(1.2); 
        text-shadow: 0 0 20px #00ffff, 0 0 40px #00ffff;
    }
    100% { 
        opacity: 0; 
        transform: translate(-50%, -50%) scale(1.5); 
    }
}

.glitch-flash {
    animation: glitchFlash 0.6s ease-out;
}

@keyframes glitchFlash {
    0%, 100% { 
        filter: none; 
        transform: none; 
    }
    20% { 
        filter: hue-rotate(180deg) brightness(1.5); 
        transform: translate(-2px, 1px); 
    }
    40% { 
        filter: hue-rotate(-90deg) brightness(0.8); 
        transform: translate(2px, -1px); 
    }
    60% { 
        filter: hue-rotate(90deg) brightness(1.2); 
        transform: translate(-1px, 2px); 
    }
    80% { 
        filter: hue-rotate(45deg) brightness(0.9); 
        transform: translate(1px, -2px); 
    }
}